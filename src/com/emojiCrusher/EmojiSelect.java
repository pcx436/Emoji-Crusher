package com.emojiCrusher;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.*;
import java.util.List;

public class emojiSelect {
    private JPanel panel1;
    private JButton[][] buttons;
    private JButton quitButton;
    private JFrame frame;
    private JPanel SelectionMenu;

    private void createUIComponents() {
        int numRows = 10;
        SelectionMenu = new JPanel();
        buttons = new JButton[numRows][numRows];
        SelectionMenu.setLayout(new GridLayout(numRows, numRows));

        String parent = "./emoji/png/labeled/64/";
        List<File> dirs = new ArrayList<>();

        List<ImageIcon> icons = new ArrayList<>();

        dirs.add(new File(parent + "people"));

        //List of all files and directories
        for (File d : dirs) {
            for (File icon : Objects.requireNonNull(d.listFiles())) {
                icons.add(new ImageIcon(icon.getAbsolutePath()));
            }
        }

        int currentIcon = 0;
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < numRows; j++, currentIcon++) {
                JButton current = new JButton(icons.get(currentIcon));
                current.setFocusPainted(false);
                current.setBackground(Color.white);
                current.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent actionEvent) {
                        current.setBackground(Color.GREEN);
                    }
                });

                buttons[i][j] = current;
                SelectionMenu.add(current);
            }
        }

        SelectionMenu.setVisible(true);
    }

    public JButton[][] getButtons() {
        return buttons;
    }

    public void setButtons(JButton[][] buttons) {
        this.buttons = buttons;
    }

    public JButton getQuitButton() {
        return quitButton;
    }

    public void setQuitButton(JButton quitButton) {
        this.quitButton = quitButton;
    }

    public JFrame getFrame() {
        return frame;
    }

    public void setFrame(JFrame frame) {
        this.frame = frame;
    }

    public JPanel getSelectionMenu() {
        return SelectionMenu;
    }

    public void setSelectionMenu(JPanel selectionMenu) {
        SelectionMenu = selectionMenu;
    }

    public emojiSelect() {
        frame = new JFrame("emojiSelect");
        frame.setContentPane(new emojiSelect().panel1);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        quitButton = new JButton();
        quitButton.setText("Quit");
        panel1.add(quitButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panel1.add(SelectionMenu, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
