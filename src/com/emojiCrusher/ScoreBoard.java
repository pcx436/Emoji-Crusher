package com.emojiCrusher;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;

public class ScoreBoard {
    private JTable scoreTable;
    private JPanel BOB;
    private JLabel ScoreBoardLabel;
    private JButton QuitButton;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        BOB = new JPanel();
        BOB.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        scoreTable.setAutoCreateRowSorter(false);
        scoreTable.setAutoResizeMode(4);
        scoreTable.setFillsViewportHeight(true);
        Font scoreTableFont = this.$$$getFont$$$(null, -1, 16, scoreTable.getFont());
        if (scoreTableFont != null) scoreTable.setFont(scoreTableFont);
        scoreTable.setShowHorizontalLines(false);
        scoreTable.setShowVerticalLines(false);
        BOB.add(scoreTable, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, 150), new Dimension(150, 150), 0, false));
        final Spacer spacer1 = new Spacer();
        BOB.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, new Dimension(14, 458), null, 0, false));
        final Spacer spacer2 = new Spacer();
        BOB.add(spacer2, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, new Dimension(14, 458), null, 0, false));
        ScoreBoardLabel = new JLabel();
        Font ScoreBoardLabelFont = this.$$$getFont$$$(null, -1, 24, ScoreBoardLabel.getFont());
        if (ScoreBoardLabelFont != null) ScoreBoardLabel.setFont(ScoreBoardLabelFont);
        ScoreBoardLabel.setText("Scoreboard");
        BOB.add(ScoreBoardLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        QuitButton = new JButton();
        QuitButton.setText("Quit");
        BOB.add(QuitButton, new GridConstraints(2, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return BOB;
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("ScoreBoard");
        frame.setContentPane(new ScoreBoard().BOB);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    private void createUIComponents() {
        String data[][] = {{"JAMA", "500"}, {"VILU", "8000"}};
        String column[] = {"Name", "Score"};
        scoreTable = new JTable(data, column);
    }
}
